name: mongo-sharding-repl-cache
services:

  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 192.168.100.10
    volumes:
      - config-data:/data/db
    command: ["--configsvr", "--replSet", "config_server", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 192.168.100.11
    volumes:
      - shard1-data:/data/db
    command: ["--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_replica1:
    image: mongo:latest
    container_name: shard1_replica1
    restart: always
    ports:
      - "27021:27018"
    networks:
      app-network:
        ipv4_address: 192.168.100.12
    volumes:
      - shard1-replica1-data:/data/db
    command: ["--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018"]

  shard1_replica2:
    image: mongo:latest
    container_name: shard1_replica2
    restart: always
    ports:
      - "27022:27018"
    networks:
      app-network:
        ipv4_address: 192.168.100.13
    volumes:
      - shard1-replica2-data:/data/db
    command: ["--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018"]

  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 192.168.100.14
    volumes:
      - shard2-data:/data/db
    command: ["--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_replica1:
    image: mongo:latest
    container_name: shard2_replica1
    restart: always
    ports:
      - "27023:27019"
    networks:
      app-network:
        ipv4_address: 192.168.100.15
    volumes:
      - shard2-replica1-data:/data/db
    command: ["--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019"]

  shard2_replica2:
    image: mongo:latest
    container_name: shard2_replica2
    restart: always
    ports:
      - "27024:27019"
    networks:
      app-network:
        ipv4_address: 192.168.100.16
    volumes:
      - shard2-replica2-data:/data/db
    command: ["--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019"]

  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 192.168.100.7
    command: ["mongos", "--configdb", "config_server/configSrv:27017", "--bind_ip_all", "--port", "27020"]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      app-network:
        ipv4_address: 192.168.100.17

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
      - redis
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"
    networks:
      app-network:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  config-data:
  shard1-data:
  shard1-replica1-data:
  shard1-replica2-data:
  shard2-data:
  shard2-replica1-data:
  shard2-replica2-data: